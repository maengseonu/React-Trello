{"version":3,"sources":["atoms.tsx","Components/DraggableCard.tsx","Components/Board.tsx","Components/TrashCan.tsx","App.tsx","index.tsx","theme.ts"],"names":["localData","localStorage","getItem","toDoState","atom","key","default","JSON","parse","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DraggableCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","boardClolor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","setItem","stringify","required","type","placeholder","droppableId","info","Boolean","draggingFromThisWith","droppableProps","map","Bin","IconWrapper","TrashBin","icon","faTrashAlt","Boards","App","useRecoilState","onDragEnd","destination","source","boardCopy","taskObj","splice","sourceBoard","destinationBoard","sourceCopy","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fc9293b.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\ninterface IToDoState {\n  [key: string]: ITodo[];\n}\n\nconst localData = localStorage.getItem(\"toDos\");\n\nexport const toDoState = atom<IToDoState>({\n  key: \"toDo\",\n  default: localData\n    ? JSON.parse(localData)\n    : {\n        \"To Do\": [],\n        Doing: [],\n        Done: [],\n      },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px 10px;\n  font-weight: bold;\n  background-color: ${(props) =>\n    props.isDragging ? \"#c7ecee\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.5)\" : \"none\"};\n  box-shadow: 5px 5px 4px rgba(0, 0, 0, 0.2);\n`;\n\ninterface IDraggableCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction DraggableCard({ toDoId, toDoText, index }: IDraggableCardProps) {\n  return (\n    <Draggable key={toDoId} draggableId={toDoId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(DraggableCard); // 불필요한 리렌더링 최적화\n","import { Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport DraggableCard from \"./DraggableCard\";\n\nconst Wrapper = styled.div`\n  max-width: 300px;\n  padding-top: 10px;\n  background-color: ${(props) => props.theme.boardClolor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, 0.2);\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n`;\n\ninterface IAreaProps {\n  isDraggingFromThis: boolean;\n  isDraggingOver: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#7bed9f\"\n      : props.isDraggingFromThis\n      ? \"#ff7675\"\n      : \"transparent\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  justify-items: center;\n  input {\n    width: 80%;\n    height: 30px;\n    border: none;\n    border-radius: 10px;\n    box-shadow: 6px 6px 7px rgba(0, 0, 0, 0.2);\n  }\n`;\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n}\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction Board({ toDos, boardId }: IBoardProps) {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    const newToDo = {\n      id: Date.now(),\n      text: toDo,\n    };\n    setToDos((allBoards) => {\n      localStorage.setItem(\n        \"toDos\",\n        JSON.stringify({\n          ...allBoards,\n          [boardId]: [...allBoards[boardId], newToDo],\n        })\n      );\n      return {\n        ...allBoards,\n        [boardId]: [...allBoards[boardId], newToDo],\n      };\n    });\n    setValue(\"toDo\", \"\");\n  };\n\n  return (\n    <Wrapper>\n      <Title>{boardId}</Title>\n      <Form onSubmit={handleSubmit(onValid)}>\n        <input\n          {...register(\"toDo\", { required: true })}\n          type=\"text\"\n          placeholder={`Add task on ${boardId}`}\n        />\n      </Form>\n      <Droppable droppableId={boardId}>\n        {(magic, info) => (\n          <Area\n            isDraggingOver={info.isDraggingOver}\n            isDraggingFromThis={Boolean(info.draggingFromThisWith)}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            {toDos.map((toDo, index) => (\n              <DraggableCard\n                key={toDo.id}\n                index={index}\n                toDoId={toDo.id}\n                toDoText={toDo.text}\n              />\n            ))}\n            {magic.placeholder}\n          </Area>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n}\n\nexport default Board;\n","import { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\ninterface IBinProps {\n  isDraggingOver: Boolean;\n}\n\nconst Bin = styled.div<IBinProps>`\n  width: 75px;\n  height: 75px;\n  border-radius: 50%;\n  background-color: ${(props) => (props.isDraggingOver ? \"black\" : \"white\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  position: relative;\n  bottom: -200px;\n  transform: ${(props) => (props.isDraggingOver ? \"scale(1.4)\" : \"none\")};\n  transition: all 0.3s ease;\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, 0.2);\n  div {\n    color: ${(props) => (props.isDraggingOver ? \"white\" : \"black\")};\n    transform: ${(props) => (props.isDraggingOver ? \"scale(1.4)\" : \"none\")};\n    transition: all 0.3s ease;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  position: absolute;\n`;\n\nfunction TrashBin() {\n  return (\n    <Droppable droppableId=\"trashBin\">\n      {(magic, snapshot) => {\n        return (\n          <Bin\n            isDraggingOver={snapshot.isDraggingOver}\n            ref={magic.innerRef}\n            {...magic.droppableProps}\n          >\n            <IconWrapper>\n              <FontAwesomeIcon icon={faTrashAlt} />\n            </IconWrapper>\n            {magic.placeholder}\n          </Bin>\n        );\n      }}\n    </Droppable>\n  );\n}\n\nexport default TrashBin;\n","import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./Components/Board\";\nimport TrashBin from \"./Components/TrashCan\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  max-width: 1000px;\n  width: 100%;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  flex-direction: column;\n`;\n\nconst Boards = styled.div`\n  display: grid;\n  width: 100%;\n  gap: 10px;\n  grid-template-columns: repeat(3, 1fr);\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDreagEnd = (info: DropResult) => {\n    const { destination, source } = info;\n    if (!destination) return;\n\n    if (destination?.droppableId === \"trashBin\") {\n      // delete toDo\n      setToDos((allBoards) => {\n        const sourceCopy = [...allBoards[source.droppableId]];\n        sourceCopy.splice(source.index, 1);\n\n        // save to local storage\n        localStorage.setItem(\n          \"toDos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: sourceCopy,\n          })\n        );\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceCopy,\n        };\n      });\n      return;\n    }\n\n    if (destination?.droppableId === source.droppableId) {\n      // 같은 보드내에서 움직임\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, taskObj);\n\n        // save to local storage\n        localStorage.setItem(\n          \"toDos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: boardCopy,\n          })\n        );\n\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      // 다른 보드로 움직임\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination.index, 0, taskObj);\n\n        // save to local storage\n        localStorage.setItem(\n          \"toDos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: sourceBoard,\n            [destination.droppableId]: destinationBoard,\n          })\n        );\n\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDreagEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n        <TrashBin />\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color: black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#01a3a4\",\n  boardClolor: \"#ffdd59\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}